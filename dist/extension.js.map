{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://environment-variable-vscode-extension/./src/treeDataProvider.ts","webpack://environment-variable-vscode-extension/./src/treeItem.ts","webpack://environment-variable-vscode-extension/./src/treeView.ts","webpack://environment-variable-vscode-extension/./src/ui.ts","webpack://environment-variable-vscode-extension/external commonjs \"vscode\"","webpack://environment-variable-vscode-extension/external node-commonjs \"fs\"","webpack://environment-variable-vscode-extension/external node-commonjs \"node:process\"","webpack://environment-variable-vscode-extension/external node-commonjs \"path\"","webpack://environment-variable-vscode-extension/webpack/bootstrap","webpack://environment-variable-vscode-extension/./src/extension.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport * as vscode from 'vscode';\nimport { TreeItem, TreeItemType } from './treeItem';\nimport { env } from 'node:process';\n\nexport class TreeDataProvider implements vscode.TreeDataProvider<TreeItem>\n{\n\tprivate _onDidChangeTreeData: vscode.EventEmitter<TreeItem | undefined | void> = new vscode.EventEmitter<TreeItem | undefined | void>();\n\treadonly onDidChangeTreeData: vscode.Event<TreeItem | undefined | void> = this._onDidChangeTreeData.event;\n\n\tfilterString: string = '';\n\titemList: TreeItem[] = [];\n\tvisibleItemList: TreeItem[] = [];\n\n\tconstructor() {\n\t\tthis.loadTreeItems();\n\t}\n\n\trefresh(): void {\n\t\tthis.loadTreeItems();\n\t\tthis._onDidChangeTreeData.fire();\n\t}\n\n\tloadTreeItems() {\n\t\tthis.itemList = [];\n\t\tfor (var key of Object.keys(env)) {\n\t\t\tlet treeItem = new TreeItem(key, key, env[key], TreeItemType.Key);\n\t\t\ttreeItem.collapsibleState = vscode.TreeItemCollapsibleState.Collapsed;\n\t\t\tthis.itemList.push(treeItem);\n\t\t}\n\t}\n\n\tgetChildren(element: TreeItem): Thenable<TreeItem[]> {\n\t\tif (!element) {\n\t\t\tthis.visibleItemList = [];\n\t\t\tfor (var node of this.itemList) {\n\t\t\t\tif (!this.filterString || (this.filterString && node.doesFilterMatch(this.filterString))) {\n\t\t\t\t\tthis.visibleItemList.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Promise.resolve(this.visibleItemList);\n\t\t}\n\t\telse if (element.TreeItemType === TreeItemType.Key) {\n\t\t\tlet values: string[] = element.Value.split(':');\n\t\t\tlet valueTreeItemList = [];\n\t\t\tfor (var i in values) {\n\t\t\t\tlet treeItem = new TreeItem(values[i], element.Key, values[i], TreeItemType.Value);\n\t\t\t\ttreeItem.ParentTreeItem = element;\n\t\t\t\telement.ChildTreeItemList.push(treeItem);\n\t\t\t\tvalueTreeItemList.push(treeItem);\n\t\t\t}\n\t\t\treturn Promise.resolve(valueTreeItemList);\n\t\t}\n\t\treturn Promise.resolve([]);\n\t}\n\n\tgetTreeItem(element: TreeItem): TreeItem {\n\t\treturn element;\n\t}\n}","/* eslint-disable @typescript-eslint/naming-convention */\nimport * as vscode from 'vscode';\n\nexport class TreeItem extends vscode.TreeItem {\n\tpublic isFav: boolean = false;\n\n\tpublic Key: string;\n\tpublic Value: string;\n\tpublic TreeItemType: TreeItemType;\n\n\tpublic ParentTreeItem: TreeItem;\n\tpublic ChildTreeItemList: TreeItem[] = [];\n\n\tconstructor(label: string, key: string, value: string, treeItemType: TreeItemType) {\n\t\tsuper(label);\n\t\tthis.Key = key;\n\t\tthis.Value = value;\n\t\tthis.TreeItemType = treeItemType;\n\t\tthis.refreshUI();\n\t}\n\n\tpublic refreshUI() {\n\t\tif(this.TreeItemType === TreeItemType.Key)\n\t\t{\n\t\t\tthis.iconPath = new vscode.ThemeIcon('circle-filled');\n\t\t}\n\t\tif(this.TreeItemType === TreeItemType.Value)\n\t\t{\n\t\t\tthis.iconPath = new vscode.ThemeIcon('circle-outline');\n\t\t}\n\t}\n\n\tpublic doesFilterMatch(filterString: string): boolean {\n\t\tlet words: string[] = filterString.toLocaleLowerCase().split(',');\n\t\tlet matchingWords: string[] = [];\n\t\tfor (var word of words) {\n\t\t\tif (this.Key.toLocaleLowerCase().includes(word)) { matchingWords.push(word); continue; }\n\t\t\tif (this.Value.toLocaleLowerCase().includes(word)) { matchingWords.push(word); continue; }\n\t\t\tif (word === 'fav' && this.isFav) { matchingWords.push(word); continue; }\n\t\t}\n\n\t\treturn words.length === matchingWords.length;\n\t}\n}\n\nexport enum TreeItemType {\n\tKey = 1,\n\tValue = 2\n}","/* eslint-disable @typescript-eslint/naming-convention */\nimport * as vscode from 'vscode';\nimport { TreeItem, TreeItemType } from './treeItem';\nimport { TreeDataProvider } from './treeDataProvider';\nimport * as ui from './ui';\nimport { Clipboard } from 'ts-clipboard';\n\nexport class TreeView {\n\n\tpublic static currentPanel: TreeView | undefined;\n\tview: vscode.TreeView<TreeItem>;\n\ttreeDataProvider: TreeDataProvider;\n\tcontext: vscode.ExtensionContext;\n\tfilterString: string = '';\n\n\tconstructor(context: vscode.ExtensionContext) {\n\t\tui.logToOutput('TreeView.constructor Started');\n\t\tthis.context = context;\n\t\tthis.treeDataProvider = new TreeDataProvider();\n\t\tthis.view = vscode.window.createTreeView('TreeView', { treeDataProvider: this.treeDataProvider, showCollapseAll: true });\n\t\tcontext.subscriptions.push(this.view);\n\t\tTreeView.currentPanel = this;\n\t}\n\n\n\tasync refresh() {\n\t\tui.logToOutput('TreeView.refresh Started');\n\t\tthis.treeDataProvider.refresh();\n\t}\n\n\tasync addToFav(node: TreeItem) {\n\t\tui.logToOutput('TreeView.addToFavDAG Started');\n\t\tnode.isFav = true;\n\t}\n\n\tasync deleteFromFav(node: TreeItem) {\n\t\tui.logToOutput('TreeView.deleteFromFavDAG Started');\n\t\tnode.isFav = false;\n\t}\n\n\tasync copyToClipboard(node: TreeItem) {\n\t\tui.logToOutput('TreeView.copyToClipboard Started');\n\n\t\tif (node.TreeItemType === TreeItemType.Key) {\n\t\t\t//Clipboard.copy(node.Key);\n\t\t}\n\n\t\tif (node.TreeItemType === TreeItemType.Value) {\n\t\t\t//Clipboard.copy(node.Value);\n\t\t}\n\t}\n\n\tasync filter() {\n\t\tui.logToOutput('TreeView.filter Started');\n\t\tlet filterStringTemp = await vscode.window.showInputBox({ value: this.filterString, placeHolder: 'Enter your filters seperated by comma' });\n\n\t\tif (filterStringTemp === undefined) { return; }\n\n\t\tif (filterStringTemp !== '') {\n\t\t\tthis.filterString = filterStringTemp;\n\t\t\tthis.view.message = 'Filter : ' + this.filterString;\n\t\t\tthis.treeDataProvider.filterString = this.filterString;\n\t\t}\n\t\telse {\n\t\t\tthis.filterString = '';\n\t\t\tthis.view.message = '';\n\t\t\tthis.treeDataProvider.filterString = this.filterString;\n\t\t}\n\n\t\tthis.treeDataProvider.refresh();\n\t}\n\n}\n\n","import * as vscode from 'vscode';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nvar outputChannel: vscode.OutputChannel;\nvar logsOutputChannel: vscode.OutputChannel;\n\nexport function showOutputMessage(message: any): void {\n\n  if (!outputChannel) {\n    outputChannel = vscode.window.createOutputChannel(\"Environment-Variables-Extension\");\n  }\n\n  outputChannel.clear();\n\n  if (typeof message === \"object\") {\n    outputChannel.appendLine(JSON.stringify(message, null, 4));\n  }\n  else {\n    outputChannel.appendLine(message);\n  }\n  outputChannel.show();\n  showInfoMessage(\"Results are printed to OUTPUT / Environment-Variables-Extension\");\n}\n\nexport function logToOutput(message: any, error: Error = undefined): void {\n  let now = new Date().toLocaleString();\n\n  if (!logsOutputChannel) {\n    logsOutputChannel = vscode.window.createOutputChannel(\"Environment-Variables-Log\");\n  }\n\n  if (typeof message === \"object\") {\n    logsOutputChannel.appendLine(\"[\" + now + \"] \" + JSON.stringify(message, null, 4));\n  }\n  else {\n    logsOutputChannel.appendLine(\"[\" + now + \"] \" + message);\n  }\n\n  if (error) {\n    logsOutputChannel.appendLine(error.name);\n    logsOutputChannel.appendLine(error.message);\n    logsOutputChannel.appendLine(error.stack);\n  }\n}\n\nexport function showInfoMessage(message: string): void {\n  vscode.window.showInformationMessage(message);\n}\n\nexport function showWarningMessage(message: string): void {\n  vscode.window.showWarningMessage(message);\n}\n\nexport function showErrorMessage(message: string, error: Error = undefined): void {\n  if (error) {\n    vscode.window.showErrorMessage(message + \"\\n\\n\" + error.name + \"/n\" + error.message);\n  }\n  else {\n    vscode.window.showErrorMessage(message);\n  }\n}\n\nexport function showApiErrorMessage(message: string, jsonResult): void {\n  if (jsonResult) {\n    vscode.window.showErrorMessage(message + \"\\n\\n\"\n      + \"type:\" + jsonResult.type + \"\\n\"\n      + \"title:\" + jsonResult.title + \"\\n\"\n      + \"status:\" + jsonResult.status + \"\\n\"\n      + \"detail:\" + jsonResult.detail + \"\\n\"\n      + \"instance:\" + jsonResult.instance + \"\\n\"\n    );\n  }\n  else {\n    vscode.window.showErrorMessage(message);\n  }\n\n  /*\n  {\n  \"type\": \"string\",\n  \"title\": \"string\",\n  \"status\": 0,\n  \"detail\": \"string\",\n  \"instance\": \"string\"\n  }\n  */\n}\n\nexport function getExtensionVersion() {\n  const { version: extVersion } = JSON.parse(\n    readFileSync(join(__dirname, '..', 'package.json'), { encoding: 'utf8' })\n  );\n  return extVersion;\n}\n\nexport function openFile(file: string) {\n  vscode.commands.executeCommand('vscode.open', vscode.Uri.file(file), vscode.ViewColumn.One);\n  //vscode.workspace.openTextDocument(vscode.Uri.file(file));\n}\n\nfunction padTo2Digits(num: number) {\n  return num.toString().padStart(2, '0');\n}\n\nexport function getDuration(startDate: Date, endDate: Date): string {\n  if(!startDate)\n  {\n    return \"\";\n  }\n\n  if(!endDate || endDate < startDate)\n  {\n    endDate = new Date();//now\n  }\n\n  var duration = endDate.valueOf() - startDate.valueOf();\n  return (convertMsToTime(duration));\n}\n\nexport function convertMsToTime(milliseconds: number): string {\n  let seconds = Math.floor(milliseconds / 1000);\n  let minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  seconds = seconds % 60;\n  minutes = minutes % 60;\n\n  return `${padTo2Digits(hours)}:${padTo2Digits(minutes)}:${padTo2Digits(seconds,)}`;\n}\n\nexport function isJsonString(jsonString: string): boolean {\n  try {\n    var json = JSON.parse(jsonString);\n    return (typeof json === 'object');\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function isValidDate(dateString: string): boolean {\n  var regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateString.match(regEx)) {\n    return false;  // Invalid format\n  }\n  var d = new Date(dateString);\n  var dNum = d.getTime();\n  if (!dNum && dNum !== 0) {\n    return false; // NaN value, Invalid date\n  }\n  return d.toISOString().slice(0, 10) === dateString;\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"node:process\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { TreeView } from './treeView';\nimport { TreeItem } from './treeItem';\nimport * as ui from './ui';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\tui.logToOutput('Extension activation started');\n\n\tlet treeView:TreeView = new TreeView(context);\n\n\tvscode.commands.registerCommand('TreeView.refresh', () => {\n\t\ttreeView.refresh();\n\t});\n\n\tvscode.commands.registerCommand('TreeView.filter', () => {\n\t\ttreeView.filter();\n\t});\n\n\tvscode.commands.registerCommand('TreeView.addToFav', (node: TreeItem) => {\n\t\ttreeView.addToFav(node);\n\t});\n\n\tvscode.commands.registerCommand('TreeView.deleteFromFav', (node: TreeItem) => {\n\t\ttreeView.deleteFromFav(node);\n\t});\n\n\tvscode.commands.registerCommand('TreeView.copy', (node: TreeItem) => {\n\t\ttreeView.copyToClipboard(node);\n\t});\n\n\tui.logToOutput('Extension activation completed');\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {\n\tui.logToOutput('Extension is now deactive!');\n}\n"],"names":["constructor","_onDidChangeTreeData","vscode","EventEmitter","onDidChangeTreeData","this","event","filterString","itemList","visibleItemList","loadTreeItems","refresh","fire","key","Object","keys","env","treeItem","TreeItem","TreeItemType","Key","collapsibleState","TreeItemCollapsibleState","Collapsed","push","getChildren","element","node","doesFilterMatch","Promise","resolve","values","Value","split","valueTreeItemList","i","ParentTreeItem","ChildTreeItemList","getTreeItem","label","value","treeItemType","super","isFav","refreshUI","iconPath","ThemeIcon","words","toLocaleLowerCase","matchingWords","word","includes","length","TreeView","context","ui","logToOutput","treeDataProvider","TreeDataProvider","view","window","createTreeView","showCollapseAll","subscriptions","currentPanel","async","filterStringTemp","showInputBox","placeHolder","undefined","message","outputChannel","logsOutputChannel","showInfoMessage","showInformationMessage","padTo2Digits","num","toString","padStart","convertMsToTime","milliseconds","seconds","Math","floor","minutes","hours","createOutputChannel","clear","appendLine","JSON","stringify","show","error","now","Date","toLocaleString","name","stack","showWarningMessage","showErrorMessage","jsonResult","type","title","status","detail","instance","version","extVersion","parse","readFileSync","join","__dirname","encoding","file","commands","executeCommand","Uri","ViewColumn","One","startDate","endDate","valueOf","jsonString","e","dateString","match","d","dNum","getTime","toISOString","slice","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","treeView","registerCommand","filter","addToFav","deleteFromFav","copyToClipboard"],"sourceRoot":""}